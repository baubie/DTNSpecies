/*----------------------------------------------------------------------------

  Models if IC neurons with kinetic models of AMPA, NMDA and GABA_A receptors
  based on:

  Destexhe, A., Mainen, Z.F. and Sejnowski, T.J.  Kinetic models of 
  synaptic transmission.  In: Methods in Neuronal Modeling (2nd edition; 
  edited by Koch, C. and Segev, I.), MIT press, Cambridge, 1998, pp. 1-25.


  This file was originally written by:
  Written by Alain Destexhe, Laval University, 1995

  Modified to add extra receptors with other modifications by:
  Brandon Aubie, 2010

----------------------------------------------------------------------------*/



//----------------------------------------------------------------------------
//  load and define general graphical procedures
//----------------------------------------------------------------------------

// xopen("$(NEURONHOME)/lib/hoc/stdrun.hoc")

objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

if(ismenu==0) {
  nrnmainmenu()         // create main menu
  nrncontrolmenu()      // crate control menu
  ismenu=1
}


//----------------------------------------------------------------------------
//  general parameters
//----------------------------------------------------------------------------

dt=0.025
tstop = 100      // 15 for single psp, 25 for train
runStopAt = tstop
steps_per_ms = 1/dt
celsius = 36
v_init = -68

onset_delay = 0
tone_onset = 2
tone_duration = 20
trial_delay = 10
objectvar synAMPA[10]
objectvar synNMDA[10]

//----------------------------------------------------------------------------
//  create compartments and insert passive properties
//----------------------------------------------------------------------------

create PREON,PREOFF,PREINH,POST,dend
forall {
  diam=10
  L=10
  insert pas
  g_pas=1/5000
  e_pas=v_init
}

dend {
    nseg = 1
    diam = 2
    L = 1000
    Ra = 123
}

access POST
e_pas = -61

connect dend(0), POST(0)



//----------------------------------------------------------------------------
//  insert presynaptic mechanisms
//----------------------------------------------------------------------------

access PREON       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert hh2
ek = -90
gnabar_hh2 = 0.1
gkbar_hh2 = 0.03

objectvar stim      // insert current injection
PREON stim = new IClamp(.5)
// note: for older versions of neuron, use PulseStim instead of IClamp
stim.del = trial_delay+onset_delay+tone_onset 
stim.dur = 2        // 2 ms for single psp, 10 ms for train of psps
stim.amp = 0.1

access PREOFF       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert hh2
ek = -90
gnabar_hh2 = 0.1
gkbar_hh2 = 0.03
objectvar stim2

PREOFF stim2 = new IClamp(.5)
stim2.del = trial_delay+tone_onset+tone_duration 
stim2.dur = 8
stim2.amp = 0//.1


access PREINH       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert hh2
ek = -90
gnabar_hh2 = 0.1
gkbar_hh2 = 0.03
objectvar stim3

PREINH stim3 = new IClamp(.5)
stim3.del = trial_delay+tone_onset
stim3.dur = tone_duration
stim3.amp = 0.1


//----------------------------------------------------------------------------
//  insert postsynaptic mechansisms
//----------------------------------------------------------------------------

POST {
    insert hh2 // insert Hodgkin-Huxley Na+ and K+ currents for spikes
    ek = -90
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
}


for i = 0, 1 {
    synAMPA[i] = new AMPA()          // create synapse
    POST synAMPA[i].loc(0.5)         // assign postsynaptic compartment
    Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
    Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_AMPA   = 0.19  //  (/ms)        backward (unbinding) rate
    Erev_AMPA   = 0 //  (mV)         reversal potential
    Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
    Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
    synAMPA[i].gmax      = 0.0004 // (umho)       maximum conductance

    synNMDA[i] = new NMDA()          // create synapse
    POST synNMDA[i].loc(0.5)         // assign postsynaptic compartment
    Cmax_NMDA   = 1 //  (mM)     max transmitter concentration
    Cdur_NMDA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_NMDA  = 0.072 //  (/ms mM)     forward (binding) rate
    Beta_NMDA   = 0.0066 // (/ms)        backward (unbinding) rate
    Erev_NMDA   = 0 //  (mV)         reversal potential
    Prethresh_NMDA  = 0     //  (mV)         voltage level nec for release
    Deadtime_NMDA   = 1 //  (ms)     mimimum time between release events
    mg_NMDA     = 1 //  (mM)    physiological extracell magnesium
    synNMDA[i].gmax      = 0.0001 // (umho)       maximum conductance
}

objectvar c
c = new GABAa()          // create synapse
POST c.loc(0.5)         // assign postsynaptic compartment
setpointer c.pre, PREINH.v(0.5)    // assign presynaptic compartment
Cmax_GABAa  = 1 //  (mM)     max transmitter concentration
Cdur_GABAa  = 2 //  (ms)     transmitter duration (rising phase)
Alpha_GABAa = 5 //  (/ms mM)     forward (binding) rate
Beta_GABAa  = 0.18  //  (/ms)        backward (unbinding) rate
Erev_GABAa  = -80   //  (mV)         reversal potential
Prethresh_GABAa = 0     //  (mV)         voltage level nec for release
Deadtime_GABAa  = 1 //  (ms)     mimimum time between release events
c.gmax      = 0.0010 // (umho)       maximum conductance

dend synAMPA[0].loc(1)         // assign postsynaptic compartment
dend synNMDA[0].loc(1)         // assign postsynaptic compartment
synAMPA[0].gmax = 0.01 // (umho)

setpointer synAMPA[0].pre, PREON.v(0.5)    // assign presynaptic compartment
setpointer synNMDA[0].pre, PREON.v(0.5)    // assign presynaptic compartment
setpointer synAMPA[1].pre, PREOFF.v(0.5)    // assign presynaptic compartment
setpointer synNMDA[1].pre, PREOFF.v(0.5)    // assign presynaptic compartment

//----------------------------------------------------------------------------
//  add graphs
//----------------------------------------------------------------------------

addgraph("PREON.v(0.5)",-90,40)
addgraph("PREOFF.v(0.5)",-90,40)
addgraph("PREINH.v(0.5)",-90,40)
addgraph("POST.v(0.5)",-70,-60)
addgraph("dend.v(1)",-80,40)
addgraph("dend.v(0.5)",-80,40)
