

//----------------------------------------------------------------------------
//  load and define general graphical procedures
//----------------------------------------------------------------------------

objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

if(ismenu==0) {
  nrnmainmenu()         // create main menu
  nrncontrolmenu()      // crate control menu
  ismenu=1
}


//----------------------------------------------------------------------------
//  general parameters
//----------------------------------------------------------------------------

dt=0.025
runStopAt = tstop
steps_per_ms = 1/dt
celsius = 36
v_init = -55

tone_duration = 50
trial_delay = 10

nCN = 20
CN_smallest = 10
CN_largest = 25

nON = 10
ON_smallest= 20
ON_largest= 25

tstop = tone_duration+trial_delay+100

//----------------------------------------------------------------------------
//  create sustained CN neuron
//----------------------------------------------------------------------------

create CN[nCN]
objectvar stim[nCN]

for i = 0, nCN-1 CN[i] {
    diam=CN_smallest+(CN_largest-CN_smallest)*(i/(nCN-1))
    L=CN_smallest+(CN_largest-CN_smallest)*(i/(nCN-1))
    insert pas
    insert hh2
    g_pas=1/3000
    e_pas=-55 
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
    vtraub_hh2 = -55 

    stim[i] = new IClamp(.5)
    stim[i].del = trial_delay 
    stim[i].dur = tone_duration
    stim[i].amp = 0.1
}

addgraph("CN[0].v(0.5)",-90,40)


//----------------------------------------------------------------------------
//  create onset neurons
//----------------------------------------------------------------------------

create ON[nON]
objectvar ON_AMPA[nON][nCN]

for i = 0, nON-1 {

    ON[i] {
        diam=ON_smallest+(ON_largest-ON_smallest)*(i/(nON-1))
        L=ON_smallest+(ON_largest-ON_smallest)*(i/(nON-1))

        // Setup passive, Na+ and K+ channels
        insert pas
        insert na
        insert klt
        insert kht
        g_pas=1/3000
        e_pas=-55 
        gnabar_na = 0.20
        ena = 50
    }

    for j = 0, nCN-1{
        ON_AMPA[i][j] = new AMPA()          // create synapse
        ON[i] ON_AMPA[i][j].loc(0.5)         // assign postsynaptic compartment
        Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
        Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
        Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
        Beta_AMPA   = 0.19  //  (/ms)        backward (unbinding) rate
        Erev_AMPA   = 0 //  (mV)         reversal potential
        Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
        Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
        ON_AMPA[i][j].gmax      = 0.00200 // (umho)       maximum conductance
    }
}

for i = 0, nON-1 {
    for j = 0, nCN-1 {
        setpointer ON_AMPA[i][j].pre, CN[j].v(0.5)    // assign presynaptic compartment
    }
}

addgraph("ON[0].v(0.5)",-90,40)



//----------------------------------------------------------------------------
//  create inferior colliculus neuron
//----------------------------------------------------------------------------

create IC
create IC_dend
connect IC_dend(0), IC(0)

objectvar IC_GABAa[nCN]
objectvar IC_dend_AMPA[nON]
objectvar IC_dend_NMDA[nON]

IC {
    diam=10
    L=10

    // Setup passive, Na+ and K+ channels
    insert pas
    insert na
    insert klt
    insert kht
	insert hcno
	eh_hcno=-38
	gbar_hcno=0.01
    g_pas=1/5000
    e_pas=-55 
    gnabar_na = 0.20
    ena = 50
}

IC_dend {
    diam=2
    L=500

    insert pas
    g_pas=1/5000
    e_pas=-55 
}

for j = 0, nON-1{
    IC_dend_AMPA[j] = new AMPA()          // create synapse
    IC_dend IC_dend_AMPA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
    Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_AMPA   = 0.19  //  (/ms)        backward (unbinding) rate
    Erev_AMPA   = 0 //  (mV)         reversal potential
    Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
    Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
    IC_dend_AMPA[j].gmax      = 0//.00050 // (umho)       maximum conductance
}
for j = 0, nON-1{
    IC_dend_NMDA[j] = new NMDA()          // create synapse
    IC_dend IC_dend_NMDA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_NMDA   = 1 //  (mM)     max transmitter concentration
    Cdur_NMDA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_NMDA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_NMDA   = 0.19  //  (/ms)        backward (unbinding) rate
    Erev_NMDA   = 0 //  (mV)         reversal potential
    Prethresh_NMDA  = 0     //  (mV)         voltage level nec for release
    Deadtime_NMDA   = 1 //  (ms)     mimimum time between release events
    IC_dend_NMDA[j].gmax      = 0//.00020 // (umho)       maximum conductance
}

for j = 0, nCN-1{
    IC_GABAa[j] = new GABAa()          // create synapse
    IC IC_GABAa[j].loc(0.5)         // assign postsynaptic compartment
    Cdur_GABAa  = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_GABAa = 5 //  (/ms mM)     forward (binding) rate
    Beta_GABAa  = 0.18  //  (/ms)        backward (unbinding) rate
    Erev_GABAa  = -80   //  (mV)         reversal potential
    Prethresh_GABAa = 0     //  (mV)         voltage level nec for release
    Deadtime_GABAa  = 1 //  (ms)     mimimum time between release events
    IC_GABAa[j].gmax      = 0.0005 // (umho)       maximum conductance
}

for i = 0, nON-1 {
    setpointer IC_dend_AMPA[i].pre, ON[i].v(0.5)    // assign presynaptic compartment
    setpointer IC_dend_NMDA[i].pre, ON[i].v(0.5)    // assign presynaptic compartment
}
for i = 0, nCN-1 {
    setpointer IC_GABAa[i].pre, CN[i].v(0.5)    // assign presynaptic compartment
}

addgraph("IC.v(0.5)",-90,40)
//addgraph("IC_dend.v(1.0)",-90,40)
//addgraph("IC_dend.v(0.0)",-90,40)





/*
create PREON,PREOFF,PREINH,POST,dend
forall {
  diam=10
  L=10
  insert pas
  g_pas=1/5000
  e_pas=v_init
}

dend {
    nseg = 5
    diam = 3
    L = 700
    Ra = 100
}

connect dend(0), POST(0)



//----------------------------------------------------------------------------
//  insert presynaptic mechanisms
//----------------------------------------------------------------------------

access PREON       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert na
insert klt
insert kht
ek = -90
ena = 0

objectvar stim      // insert current injection
PREON stim = new IClamp(.5)
// note: for older versions of neuron, use PulseStim instead of IClamp
stim.del = trial_delay+onset_delay+tone_onset 
stim.dur = tone_duration        // 2 ms for single psp, 10 ms for train of psps
stim.amp = 0.1

access PREOFF       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert hh2
ek = -90
gnabar_hh2 = 0.1
gkbar_hh2 = 0.03
objectvar stim2

PREOFF stim2 = new IClamp(.5)
stim2.del = trial_delay+tone_onset+tone_duration 
stim2.dur = 2
stim2.amp = 0//.1


access PREINH       // insert Hodgk-Hux. Na+ and K+ currents for spikes
insert hh2
ek = -90
gnabar_hh2 = 0.1
gkbar_hh2 = 0.03
objectvar stim3

PREINH stim3 = new IClamp(.5)
stim3.del = trial_delay+tone_onset
stim3.dur = tone_duration
stim3.amp = 0.05


//----------------------------------------------------------------------------
//  insert postsynaptic mechansisms
//----------------------------------------------------------------------------

POST {
    insert hh2 // insert Hodgkin-Huxley Na+ and K+ currents for spikes
    ek = -90
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
}
dend {
    insert hh2 // insert Hodgkin-Huxley Na+ and K+ currents for spikes
    ek = -90
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
}


for i = 0, 1 {
    synAMPA[i] = new AMPA()          // create synapse
    POST synAMPA[i].loc(0.5)         // assign postsynaptic compartment
    Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
    Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_AMPA   = 0.19  //  (/ms)        backward (unbinding) rate
    Erev_AMPA   = 0 //  (mV)         reversal potential
    Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
    Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
    synAMPA[i].gmax      = 0.0050 // (umho)       maximum conductance

    synNMDA[i] = new NMDA()          // create synapse
    POST synNMDA[i].loc(0.5)         // assign postsynaptic compartment
    Cmax_NMDA   = 1 //  (mM)     max transmitter concentration
    Cdur_NMDA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_NMDA  = 0.072 //  (/ms mM)     forward (binding) rate
    Beta_NMDA   = 0.0066 // (/ms)        backward (unbinding) rate
    Erev_NMDA   = 0 //  (mV)         reversal potential
    Prethresh_NMDA  = 0     //  (mV)         voltage level nec for release
    Deadtime_NMDA   = 1 //  (ms)     mimimum time between release events
    mg_NMDA     = 0.5 //  (mM)    physiological extracell magnesium
    synNMDA[i].gmax      = 0.0100 // (umho)       maximum conductance
}

objectvar c
c = new GABAa()          // create synapse
POST c.loc(0.5)         // assign postsynaptic compartment
setpointer c.pre, PREINH.v(0.5)    // assign presynaptic compartment
Cmax_GABAa  = 1 //  (mM)     max transmitter concentration
Cdur_GABAa  = 1 //  (ms)     transmitter duration (rising phase)
Alpha_GABAa = 5 //  (/ms mM)     forward (binding) rate
Beta_GABAa  = 0.18  //  (/ms)        backward (unbinding) rate
Erev_GABAa  = -80   //  (mV)         reversal potential
Prethresh_GABAa = 0     //  (mV)         voltage level nec for release
Deadtime_GABAa  = 1 //  (ms)     mimimum time between release events
c.gmax      = 0.0100 // (umho)       maximum conductance

dend synAMPA[0].loc(1)         // assign postsynaptic compartment
dend synNMDA[0].loc(1)         // assign postsynaptic compartment

setpointer synAMPA[0].pre, PREON.v(0.5)    // assign presynaptic compartment
setpointer synNMDA[0].pre, PREON.v(0.5)    // assign presynaptic compartment
setpointer synAMPA[1].pre, PREOFF.v(0.5)    // assign presynaptic compartment
setpointer synNMDA[1].pre, PREOFF.v(0.5)    // assign presynaptic compartment

//----------------------------------------------------------------------------
//  add graphs
//----------------------------------------------------------------------------

addgraph("PREON.v(0.5)",-90,40)
addgraph("PREOFF.v(0.5)",-90,40)
addgraph("PREINH.v(0.5)",-90,40)
addgraph("POST.v(0.5)",-80,40)
*/
