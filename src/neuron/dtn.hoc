

//----------------------------------------------------------------------------
//  load and define general graphical procedures
//----------------------------------------------------------------------------

objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

if(ismenu==0) {
  nrnmainmenu()         // create main menu
  nrncontrolmenu()      // crate control menu
  ismenu=1
}


//----------------------------------------------------------------------------
//  general parameters
//----------------------------------------------------------------------------

dt=0.025
runStopAt = tstop
steps_per_ms = 1/dt
celsius = 36

trial_delay = 5
CN_delay = 0
CN2_delay = 5
CN3_delay = 1

// SETUP THE TRIALS
PEmode = 1

trials = 10
minTrial = 1
dTrial = 1 
trial_dur = 100

PEdur = 1
PEmindel = 1
PEddel = 0.5

nCN = 25
CN_smallest = 10
CN_largest = 15
CN2_smallest = 10
CN2_largest = 25
CN3_smallest = 10
CN3_largest = 25

nON = 12
ON_smallest= 20
ON_largest= 25

tstop = trial_dur*trials

//----------------------------------------------------------------------------
//  create sustained CN neuron
//----------------------------------------------------------------------------

create CN[nCN]
objectvar stim[trials][nCN]
objectvar stimE[trials][nCN]

for i = 0, nCN-1 CN[i] {
    diam=CN_smallest+(CN_largest-CN_smallest)*(i/(nCN-1))
    L=CN_smallest+(CN_largest-CN_smallest)*(i/(nCN-1))
    insert pas
    insert hh2
    g_pas=1/5000
    e_pas=-55 
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
    vtraub_hh2 = -55 
    v_init = -55

	for j = 0, trials-1 {
        if(PEmode == 0) {
            stim[j][i] = new IClamp(.5)
            stim[j][i].del = trial_delay+CN_delay+trial_dur*j
            stim[j][i].dur = minTrial+dTrial*j
            stim[j][i].amp = 0.1
        }
        if(PEmode == 1) {
            stim[j][i] = new IClamp(.5)
            stim[j][i].del = trial_delay+CN_delay+trial_dur*j
            stim[j][i].dur = PEdur 
            stim[j][i].amp = 0.1
            stimE[j][i] = new IClamp(.5)
            stimE[j][i].del = trial_delay+CN_delay+trial_dur*j + PEmindel+PEddel*j
            stimE[j][i].dur = PEdur 
            stimE[j][i].amp = 0.1
        }
	}
}


create CN2[nCN]
objectvar stim2[trials][nCN]
objectvar stim2E[trials][nCN]
for i = 0, nCN-1 CN2[i] {
    diam=CN2_smallest+(CN2_largest-CN2_smallest)*(i/(nCN-1))
    L=CN2_smallest+(CN2_largest-CN2_smallest)*(i/(nCN-1))
    insert pas
    insert hh2
    g_pas=1/3000
    e_pas=-55 
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
    vtraub_hh2 = -55 
    v_init = -55

	for j = 0,trials-1 {
        if(PEmode == 0){
            stim2[j][i] = new IClamp(.5)
            stim2[j][i].del = trial_delay+CN2_delay+trial_dur*j
            stim2[j][i].dur = minTrial+dTrial*j
            stim2[j][i].amp = 0.1
        }
        if(PEmode == 1){
            stim2[j][i] = new IClamp(.5)
            stim2[j][i].del = trial_delay+CN2_delay+trial_dur*j
            stim2[j][i].dur = PEdur
            stim2[j][i].amp = 0.1
            stim2E[j][i] = new IClamp(.5)
            stim2E[j][i].del = trial_delay+CN2_delay+trial_dur*j + PEmindel+PEddel*j
            stim2E[j][i].dur = PEdur
            stim2E[j][i].amp = 0.1
        }
	}
}


create CN3[nCN]
objectvar stim3[trials][nCN]
objectvar stim3E[trials][nCN]
for i = 0, nCN-1 CN3[i] {
    diam=CN_smallest+(CN3_largest-CN3_smallest)*(i/(nCN-1))
    L=CN_smallest+(CN3_largest-CN3_smallest)*(i/(nCN-1))
    insert pas
    insert hh2
    g_pas=1/3000
    e_pas=-55 
    gnabar_hh2 = 0.1
    gkbar_hh2 = 0.03
    vtraub_hh2 = -55 
    v_init = -55

	for j = 0, trials-1 {
        if(PEmode == 0) {
            stim3[j][i] = new IClamp(.5)
            stim3[j][i].del = trial_delay+CN3_delay+trial_dur*j 
            stim3[j][i].dur = minTrial+dTrial*j
            stim3[j][i].amp = 0.1
        }
        if(PEmode == 1) {
            stim3[j][i] = new IClamp(.5)
            stim3[j][i].del = trial_delay+CN3_delay+trial_dur*j 
            stim3[j][i].dur = PEdur
            stim3[j][i].amp = 0.1
            stim3E[j][i] = new IClamp(.5)
            stim3E[j][i].del = trial_delay+CN3_delay+trial_dur*j+PEmindel+PEddel*j
            stim3E[j][i].dur = PEdur
            stim3E[j][i].amp = 0.1
        }
	}
}




//----------------------------------------------------------------------------
//  create onset neurons
//----------------------------------------------------------------------------

create ON[nON]
objectvar ON_AMPA[nON][nCN]

for i = 0, nON-1 {

    ON[i] {
        diam=ON_smallest+(ON_largest-ON_smallest)*(i/(nON-1))
        L=ON_smallest+(ON_largest-ON_smallest)*(i/(nON-1))

        // Setup passive, Na+ and K+ channels
        insert pas
        insert na
        insert klt
        insert kht
        g_pas=1/3000
        e_pas=-55 
        gnabar_na = 0.20
        ena = 50
        v_init = -55
    }

    for j = 0, nCN-1{
        ON_AMPA[i][j] = new AMPA()          // create synapse
        ON[i] ON_AMPA[i][j].loc(0.5)         // assign postsynaptic compartment
        Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
        Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
        Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
        Beta_AMPA   = 0.19  //  (/ms)        backward (unbinding) rate
        Erev_AMPA   = 0 //  (mV)         reversal potential
        Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
        Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
        ON_AMPA[i][j].gmax      = 0.00200 // (umho)       maximum conductance
    }
}

for i = 0, nON-1 {
    for j = 0, nCN-1 {
        setpointer ON_AMPA[i][j].pre, CN3[j].v(0.5)    // assign presynaptic compartment
    }
}




//----------------------------------------------------------------------------
//  create inferior colliculus neuron
//----------------------------------------------------------------------------

create IC

objectvar IC_GABAa[nCN]
objectvar IC_dend_AMPA[nON]
objectvar IC_dend_NMDA[nON]
objectvar IC_AMPA[nCN]
objectvar IC_NMDA[nCN]

IC {
    diam=15
    L=15

    // Setup passive, Na+ and K+ channels
    insert pas
    g_pas=1/5000
    e_pas=-55
	insert hh2
    gnabar_hh2 = 0.030
    gkbar_hh2 = 0.030
    vtraub_hh2 = -55
    v_init = -55
}

for j = 0, nON-1{
    IC_dend_AMPA[j] = new AMPA()          // create synapse
    IC IC_dend_AMPA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
    Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_AMPA   = 0.30 //0.19  //  (/ms)        backward (unbinding) rate
    Erev_AMPA   = 0 //  (mV)         reversal potential
    Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
    Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
    IC_dend_AMPA[j].gmax      = 0.00020 // (umho)       maximum conductance
}
for j = 0, nON-1{
    IC_dend_NMDA[j] = new NMDA()          // create synapse
    IC IC_dend_NMDA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_NMDA   = 1 //  (mM)     max transmitter concentration
    Cdur_NMDA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_NMDA  = 0.072 //  (/ms mM)     forward (binding) rate
    Beta_NMDA   = 0.0066 // (/ms)        backward (unbinding) rate
    Erev_NMDA   = 0 //  (mV)         reversal potential
    Prethresh_NMDA  = 0     //  (mV)         voltage level nec for release
    Deadtime_NMDA   = 1 //  (ms)     mimimum time between release events
	mg_NMDA = 1.0
    IC_dend_NMDA[j].gmax      = 0.00010 // (umho)       maximum conductance
}

for j = 0, nCN-1{
    IC_GABAa[j] = new GABAa()          // create synapse
    IC IC_GABAa[j].loc(0.5)         // assign postsynaptic compartment
    Cdur_GABAa  = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_GABAa = 5 //  (/ms mM)     forward (binding) rate
    Beta_GABAa  = 0.18  //  (/ms)        backward (unbinding) rate
    Erev_GABAa  = -80   //  (mV)         reversal potential
    Prethresh_GABAa = 0     //  (mV)         voltage level nec for release
    Deadtime_GABAa  = 1 //  (ms)     mimimum time between release events
    IC_GABAa[j].gmax      = 0.00015 // (umho)       maximum conductance
}

for j = 0, nCN-1{
    IC_AMPA[j] = new AMPA()          // create synapse
    IC IC_AMPA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_AMPA   = 1 //  (mM)     max transmitter concentration
    Cdur_AMPA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_AMPA  = 1.1   //  (/ms mM)     forward (binding) rate
    Beta_AMPA   = 0.30 //0.19  //  (/ms)        backward (unbinding) rate
    Erev_AMPA   = 0 //  (mV)         reversal potential
    Prethresh_AMPA  = 0     //  (mV)         voltage level nec for release
    Deadtime_AMPA   = 1 //  (ms)     mimimum time between release events
    IC_AMPA[j].gmax      = 0.0001 // (umho)       maximum conductance
}
for j = 0, nCN-1{
    IC_NMDA[j] = new NMDA()          // create synapse
    IC IC_NMDA[j].loc(1.0)         // assign postsynaptic compartment
    Cmax_NMDA   = 1 //  (mM)     max transmitter concentration
    Cdur_NMDA   = 1 //  (ms)     transmitter duration (rising phase)
    Alpha_NMDA  = 0.072 //  (/ms mM)     forward (binding) rate
    Beta_NMDA   = 0.0066 // (/ms)        backward (unbinding) rate
    Erev_NMDA   = 0 //  (mV)         reversal potential
    Prethresh_NMDA  = 0     //  (mV)         voltage level nec for release
    Deadtime_NMDA   = 1 //  (ms)     mimimum time between release events
	mg_NMDA = 1.0
    IC_NMDA[j].gmax      = 0.0001 // (umho)       maximum conductance
}

for i = 0, nON-1 {
    setpointer IC_dend_AMPA[i].pre, ON[i].v(0.5)    // assign presynaptic compartment
    setpointer IC_dend_NMDA[i].pre, ON[i].v(0.5)    // assign presynaptic compartment
}
for i = 0, nCN-1 {
    setpointer IC_GABAa[i].pre, CN[i].v(0.5)    // assign presynaptic compartment
    setpointer IC_AMPA[i].pre, CN2[i].v(0.5)    // assign presynaptic compartment
    setpointer IC_NMDA[i].pre, CN2[i].v(0.5)    // assign presynaptic compartment
}

addgraph("CN[0].v(0.5)",-90,40)
addgraph("CN2[0].v(0.5)",-90,40)
addgraph("CN3[0].v(0.5)",-90,40)
addgraph("ON[0].v(0.5)",-90,40)
addgraph("IC.v(0.5)",-70,40)
addgraph("IC_GABAa[0].i",-0.0500,0.0500)
g[5].addvar("IC_AMPA[0].i",2,0)
g[5].addvar("IC_NMDA[0].i",3,1)
addgraph("IC_NMDA[0].B",0,1)


